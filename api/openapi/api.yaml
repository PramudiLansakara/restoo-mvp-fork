openapi: 3.0.1
info:
  title: Restoo API
  description: API document for Restoo app
  termsOfService: 'http://swagger.io/terms/'
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
servers:
  - url: 'http://localhost:3001/api/'
  - url: 'https://restoo-backend.herokuapp.com/api/'
tags:
  - name: Auth
    description: Everything about authendication
  - name: Waiter
    description: Everything about waiters
  - name: Event
    description: Everything about events
  - name: FoodCategory
    description: Food category related
  - name: Admin
    description: Admin related endpoints
  - name: Order
    description: Order related endpoints
paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: Logs user into the system
      operationId: login
      requestBody:
        description: The login object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogRes'
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register user/admin/waiter into the system
      operationId: regiter
      requestBody:
        description: The register object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
        required: true
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterRes'
  /waiters/list:
    get:
      tags:
        - Waiter
      summary: getting the list of waiters
      operationId: get-waiter-list
      security:
        - bearerAuth: []
      responses:
        '200':
          description: list of waiters
  /events/new:
    post:
      description: Creates a new event
      summary: Creates a new event
      tags:
        - Event
      security:
        - bearerAuth: []
      operationId: createEvent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventSchema'
      responses:
        '201':
          $ref: '#/components/schemas/EventSchema'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/UnknownError'
  '/events/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventSchema'
      operationId: get-events-id
      description: get event details
      security:
        - bearerAuth: []
    delete:
      summary: ''
      operationId: deleteEvent
      responses:
        '200':
          description: OK
      description: deletes an event
      security:
        - bearerAuth: []
  /events/list:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          $ref: '#/components/responses/EventLisitingResponse'
      operationId: get-events-list
      description: Get all events
  /food/category:
    post:
      description: Creates a new food category
      summary: Creates a new food category
      operationId: createFoodCategory
      tags:
        - Admin
        - FoodCategory
      security:
        - bearerAuth: []
      requestBody:
        description: Create food category
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFoodSchema'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdSchema'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/UnknownError'
  '/food/category/{id}':
    put:
      description: Updates a food category
      summary: Updates a food category
      operationId: updateFoodCategory
      parameters:
        - $ref: '#/components/parameters/IdPathParam'
      tags:
        - Admin
        - FoodCategory
      security:
        - bearerAuth: []
      requestBody:
        description: Create food category
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFoodSchema'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/UnknownError'
    delete:
      description: Deletes a food category
      summary: Deletes a food category
      operationId: deleteFoodCategory
      parameters:
        - $ref: '#/components/parameters/IdPathParam'
      tags:
        - Admin
        - FoodCategory
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/UnknownError'
  /food/category/list:
    get:
      description: Get all categories
      summary: Get all categories
      operationId: getFoodCategories
      tags:
        - FoodCategory
      responses:
        '200':
          $ref: '#/components/responses/FoodCategoryListing'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/UnknownError'
  /order/new:
    post:
      description: Creates a new order
      summary: Creates a new order
      tags:
        - User
        - Order
      security:
        - bearerAuth: []
      operationId: createOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderSchema'
      responses:
        '201':
          $ref: '#/components/responses/OrderCreatedResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/UnknownError'
  /order/list:
    get:
      description: List all orders
      summary: List all orders
      security:
        - bearerAuth: []
      tags:
        - Waiter
        - Admin
        - Order
      operationId: listOrders
      parameters:
        - $ref: '#/components/parameters/LimitQueryParam'
        - $ref: '#/components/parameters/OffsetQueryParam'
        - $ref: '#/components/parameters/OrderStatusQueryParam'
        - $ref: '#/components/parameters/SortQueryParam'
        - $ref: '#/components/parameters/UserIdQueryParam'
        - $ref: '#/components/parameters/WaiterIdQueryParam'
      responses:
        '200':
          $ref: '#/components/responses/OrderLisitingResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/UnknownError'
  /order/list/my:
    get:
      description: List my orders
      summary: List my orders
      security:
        - bearerAuth: []
      tags:
        - User
        - Order
      operationId: listMyOrders
      parameters:
        - $ref: '#/components/parameters/LimitQueryParam'
        - $ref: '#/components/parameters/OffsetQueryParam'
        - $ref: '#/components/parameters/OrderStatusQueryParam'
        - $ref: '#/components/parameters/SortQueryParam'
      responses:
        '200':
          $ref: '#/components/responses/OrderLisitingResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/UnknownError'
  '/order/{id}':
    get:
      description: Get order
      summary: Get order
      security:
        - bearerAuth: []
      tags:
        - User
        - Order
      operationId: getOrder
      parameters:
        - $ref: '#/components/parameters/IdPathParam'
      responses:
        '200':
          $ref: '#/components/responses/OrderViewResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/UnknownError'
  '/order/{id}/selfassign':
    put:
      description: Self assign waiter to order by id
      summary: Self assign waiter to order by id
      security:
        - bearerAuth: []
      tags:
        - Order
        - Waiter
      operationId: selfAssignWaiterToOrder
      parameters:
        - $ref: '#/components/parameters/IdPathParam'
      responses:
        '200':
          $ref: '#/components/responses/OkResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/UnknownError'
  '/order/{id}/status':
    put:
      description: Change status of an order
      summary: Change status of an order
      security:
        - bearerAuth: []
      tags:
        - Order
        - Admin
        - Waiter
      operationId: changeOrderStatus
      externalDocs:
        url: 'https://github.com/syetalabs/Restoo_Backend/blob/main/docs/diagrams/Order-State.png'
      parameters:
        - $ref: '#/components/parameters/IdPathParam'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  $ref: '#/components/schemas/OrderStatusEnum'
      responses:
        '200':
          $ref: '#/components/responses/OkResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/UnknownError'
  /mail/reservationFeedback:
    post:
      summary: ''
      operationId: post-mail-reservationFeedback
      responses:
        '200':
          description: OK
      description: save reservation Feedback
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                receiverEmail:
                  type: string
                  example: jay122@gmail.com
                name:
                  type: string
                  example: Jay diz
                reservationDate:
                  type: string
                  format: date
                  example: '2021-12-24T00:00:00.000+00:00'
                from:
                  type: string
                  example: '10:00'
                to:
                  type: string
                  example: '11:50'
                personCount:
                  type: string
                  example: '2'
                tableNumber:
                  type: string
                  example: '5'
                reservationStatus:
                  type: string
                  enum:
                    - accepted
                    - declined
                  example: declined
                note:
                  type: string
                  example: table for 2
              required:
                - receiverEmail
                - name
                - reservationDate
                - from
                - to
                - personCount
                - tableNumber
                - reservationStatus
  /payment/:
    post:
      summary: ''
      operationId: post-payment
      responses:
        '200':
          description: CREATED
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/Id'
      description: Creates a payment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                _id:
                  $ref: '#/components/schemas/Id'
                paymentMethod:
                  type: string
                  example: card
                totalAmount:
                  type: number
                  example: '120'
                currency:
                  type: string
                  example: eur
                status:
                  type: string
                  example: unpaid
                  enum:
                    - unpaid
                    - paid
                    - cancelled
                orderId:
                  $ref: '#/components/schemas/Id'
                paidAt:
                  type: string
                  format: date
                  example: '2022-02-17T03:59:13.192+00:00'
  /payment/webhook:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  paymentId:
                    $ref: '#/components/schemas/Id'
      operationId: get-payment-webhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventSchema'
  '/payment/session/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: CREATED
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/Id'
      operationId: get-payment-session-id
      description: createStripePaymentSession
  '/payment/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
      operationId: get-payment-id
  /payment/list:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          $ref: '#/components/responses/PaymentLisitingResponse'
      operationId: get-payment-list
      security:
        - bearerAuth: []
  /reservations/new:
    post:
      summary: ''
      operationId: post-reservations
      responses:
        '200':
          description: CREATED
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/Id'
      description: Creates a reservations
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Jay diz
                email:
                  type: string
                  example: jay1344@gmail.com
                note:
                  type: string
                  example: table for 4
                reservationDate:
                  type: string
                  example: '2021-12-24T00:00:00.000+00:00'
                from:
                  type: string
                  example: '07:00'
                to:
                  type: string
                  example: '09:00'
                personCount:
                  type: number
                  example: 4
    parameters: []
  '/reservations/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          $ref: '#/components/responses/ViewReservationResponse'
      operationId: get-reservations-id
      description: Deletes a reservation
    delete:
      summary: ''
      operationId: delete-reservations-id
      responses:
        '200':
          description: OK
  /reservations/list:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          $ref: '#/components/responses/ReservationLisitingResponse'
      operationId: get-reservations-list
  '/reservations/{id}/update':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    put:
      summary: ''
      operationId: put-reservations-id-update
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: john doe
                email:
                  type: string
                  format: email
                  example: john1344@gmail.com
                note:
                  type: string
                  example: reservation note
                reservationDate:
                  type: string
                  format: date
                  example: '2021-12-23T00:00:00.000+00:00'
                from:
                  type: string
                  example: '07:00'
                to:
                  type: string
                  example: '09:00'
                personCount:
                  type: string
                  example: '5'
                adminNote:
                  type: string
                  example: adminNote
                tableNumber:
                  type: string
              required:
                - name
                - email
                - reservationDate
                - from
                - to
                - personCount
  '/reservations/{id}/status':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    put:
      summary: ''
      operationId: put-reservations-id-status
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reservationStatus:
                  type: string
                  example: accepted
                  enum:
                    - accepted
                    - declined
                adminNote:
                  type: string
                  example: adminNote
                tableNumber:
                  type: string
                  example: '5'
              required:
                - reservationStatus
                - tableNumber
  /specials/new:
    parameters: []
    post:
      summary: ''
      operationId: post-specials-new
      responses:
        '200':
          description: CREATED
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/Id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Specials'
  '/specials/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Specials'
      operationId: get-specials-id
      description: ''
    put:
      summary: ''
      operationId: put-specials-id
      responses:
        '200':
          description: OK
      description: Updates specials
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Monday specials
                description:
                  type: string
                  example: 'specials details '
                bannerImg:
                  type: string
                  example: damas-lounge/media/9d466908-df6e-4017-add5-26d29af4bb16.jfif
        description: ''
    delete:
      summary: ''
      operationId: delete-specials-id
      responses:
        '200':
          description: OK
      description: delete specials
  /specials/list:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          $ref: '#/components/responses/SpecialsLisitingResponse'
      operationId: get-specials-list
  /table/:
    post:
      summary: ''
      operationId: post-table
      responses:
        '200':
          $ref: '#/components/responses/CreateTableResponse'
      description: Create table
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tableNumber:
                  type: number
                  example: 4
                status:
                  type: string
                  default: active
                  enum:
                    - active
                    - deactive
                  example: active
              required:
                - tableNumber
                - status
  '/table/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Table'
      operationId: get-table-id
      security:
        - bearerAuth: []
    delete:
      summary: ''
      operationId: delete-table-id
      responses:
        '200':
          description: OK
      description: delete a table
  /table/list:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          $ref: '#/components/responses/TableLisitingResponse'
      operationId: get-table-list
  '/table/update/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    put:
      summary: ''
      operationId: put-table-update-id
      responses:
        '200':
          description: OK
      description: update table
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tableNumber:
                  type: number
                  example: 5
                status:
                  type: string
                  default: active
                  enum:
                    - active
                  example: active
              required:
                - tableNumber
  /table/alltablestatus:
    put:
      summary: ''
      operationId: put-table-all
      responses:
        '200':
          description: OK
        '':
          description: OK
      description: Set All Table Status
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum:
                    - active
                    - deactive
                  example: active
                  default: active
    parameters: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIError'
    OkResponse:
      description: Ok
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MessageResponse'
    UnknownError:
      description: Unknown Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIError'
    ValidationError:
      description: ValidationError Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIError'
    FoodCategoryListing:
      description: Food category listing
      content:
        application/json:
          schema:
            properties:
              categories:
                type: array
                items:
                  $ref: '#/components/schemas/FoodCategoryListingSchema'
    OrderCreatedResponse:
      description: order created
      content:
        application/json:
          schema:
            properties:
              order:
                $ref: '#/components/schemas/OrderCreatedResponse'
    OrderLisitingResponse:
      description: order list
      content:
        application/json:
          schema:
            properties:
              total:
                type: integer
                description: total orders
                example: 10
              orders:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/OrderBase'
                  properties:
                    customer:
                      type: string
                      example: 5ff2ae9a4e797a001e87fcdb
    OrderViewResponse:
      description: Order View
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/OrderView'
    EventLisitingResponse:
      description: event list
      content:
        application/json:
          schema:
            type: object
            properties:
              events:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/EventSchema'
        application/xml:
          schema:
            type: object
            properties:
              events:
                type: string
    PaymentLisitingResponse:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              payments:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/Payment'
    ViewReservationResponse:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              reservation:
                $ref: '#/components/schemas/Reservation'
    ReservationLisitingResponse:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              reservations:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/Reservation'
    SpecialsLisitingResponse:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              specials:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/Specials'
    CreateTableResponse:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              _id:
                type: string
                example: 6172f543d1a1bd3f84074b1f
              tableNumber:
                type: number
                example: 4
              status:
                type: string
                example: active
            required:
              - _id
              - tableNumber
    TableLisitingResponse:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              tables:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/Table'
  parameters:
    IdPathParam:
      in: path
      name: id
      schema:
        type: string
      required: true
    UserIdQueryParam:
      in: query
      name: userId
      schema:
        type: string
      required: false
    WaiterIdQueryParam:
      in: query
      name: waiterId
      schema:
        type: string
      required: false
    OrderStatusQueryParam:
      in: query
      name: status
      schema:
        type: string
        enum:
          - waiting
          - accepted
          - preparing
          - served
          - completed
    OffsetQueryParam:
      in: query
      name: offset
      description: Offset the result
      schema:
        type: integer
        example: 1
    LimitQueryParam:
      in: query
      name: limit
      description: Limit the returned number of results
      schema:
        type: integer
        example: 10
    SortQueryParam:
      in: query
      name: sort
      description: Sort the result
      schema:
        type: string
        enum:
          - asc
          - desc
  schemas:
    Id:
      type: string
      example: 5ff2b5b81dd33e00ebad1269
      description: id resource
    UserRole:
      type: string
      enum:
        - admin
        - waiter
        - user
    UserPartial:
      type: object
      properties:
        name:
          type: string
          example: Kasun
          description: Name of user
        role:
          $ref: '#/components/schemas/UserRole'
        _id:
          $ref: '#/components/schemas/Id'
    OrderView:
      allOf:
        - $ref: '#/components/schemas/OrderBase'
      properties:
        items:
          type: array
          items:
            type: object
            properties:
              _id:
                $ref: '#/components/schemas/Id'
              item:
                $ref: '#/components/schemas/FoodIteam'
              quantity:
                type: integer
                description: quantity of item
                example: 1
    FoodIteam:
      type: object
      properties:
        _id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
          description: name of item
          example: apple
        category:
          $ref: '#/components/schemas/Id'
        description:
          type: string
          description: description of category
          example: an apple
        price:
          type: number
          description: price of item
          example: 10.5
    CreateOrderItemSchema:
      type: object
      properties:
        item:
          type: string
          example: 5ff2b5b81dd33e00ebad1269
          description: item id
        quantity:
          type: integer
          example: 1
          description: quantity of item
      title: ''
      description: ''
    CreateOrderSchema:
      type: object
      properties:
        note:
          type: string
          example: prepare soon
          nullable: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/CreateOrderItemSchema'
        orderType:
          type: string
        paymentMethod:
          type: string
          enum:
            - cash
            - card
          example: card
        currency:
          type: string
          example: usd
        reference:
          type: string
        status:
          type: string
          example: waiting
          enum:
            - waiting
            - accepted
            - preparing
            - served
            - completed
            - cancelled
        total:
          type: number
          example: 9
        table:
          type: number
          example: 5
        customer:
          type: object
          properties:
            name:
              type: string
              example: John doe
            email:
              type: string
              example: joe224@gmail.com
            phoneNumber:
              type: string
              example: '0712456787'
    OrderStatusEnum:
      type: string
      description: status of order
      enum:
        - waiting
        - accepted
        - preparing
        - served
        - completed
        - cancelled
    OrderBase:
      type: object
      properties:
        _id:
          type: string
          description: Id of order
          example: 5ffd8dc6faa662038750c4a6
        status:
          $ref: '#/components/schemas/OrderStatusEnum'
        note:
          type: string
          description: note
          example: do it quickly
        items:
          type: array
          items:
            $ref: '#/components/schemas/CreateOrderItemSchema'
        paymentMethod:
          type: string
          enum:
            - cash
            - card
          example: card
        placedAt:
          type: string
          description: order placed at
          example: '2021-01-12T11:53:42.602Z'
        currency:
          type: string
          example: usd
        total:
          type: integer
          format: int32
          description: total price
          example: 120
        table:
          type: integer
          description: table no
          example: 14
        reference:
          type: string
          description: order referenece
          example: 2PrWIV2-_arrAfC_QEf5X
        customer:
          type: object
          properties:
            name:
              type: string
              example: John doe
            email:
              type: string
              example: joe224@gmail.com
            phoneNumber:
              type: string
              example: '0712456787'
    OrderCreatedResponse:
      allOf:
        - $ref: '#/components/schemas/OrderBase'
      properties:
        items:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
                example: 5ffd8dc6faa662038750c4a7
              item:
                type: string
                description: item name
                example: 5ffd72990bc926001f9c124b
              quantity:
                type: integer
                description: quantity of order
                format: int32
                example: 10
        customer:
          type: string
          example: 5ff2ae9a4e797a001e87fcdb
    CreateFoodSchema:
      type: object
      description: Create food
      properties:
        name:
          type: string
          example: Drink
        description:
          type: string
          example: All cold drinks
          maximum: 500
      required:
        - name
    UpdateFoodSchema:
      type: object
      description: Create food
      properties:
        name:
          type: string
          example: Beef Burger
        description:
          type: string
          example: All Meals
          maximum: 500
        price:
          type: number
          example: 5
        discountPrice:
          type: number
          example: 3
        category:
          type: string
          example: Meals
    FoodCategoryListingSchema:
      type: object
      description: Category
      properties:
        _id:
          type: string
          example: 5ff2b5b81dd33e00ebad1269
        name:
          type: string
          example: 1 drink
        description:
          type: string
          example: all about drinks
    EventSchema:
      type: object
      description: Create event
      properties:
        name:
          type: string
          example: DJ night
        description:
          type: string
          example: All cool events
        date:
          type: string
          example: '2021-09-26'
        bannerImg:
          type: string
          example: http//test.com/test.img
        time:
          type: string
          example: 12PM
      required:
        - name
    IdSchema:
      type: object
      description: Id of a resource
      properties:
        id:
          type: string
          example: 60059261520e82006464f273
    LogRes:
      type: object
      description: user object with token role and other main user properties
      properties:
        message:
          type: string
        token:
          type: string
        user:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
            email:
              type: string
            phoneNumber:
              type: string
            createdAt:
              type: string
            role:
              type: string
    Login:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
          example: user@shop.com
        password:
          type: string
          example: password
    Register:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        name:
          type: string
          example: Iean key
        phoneNumber:
          type: string
        role:
          type: string
          default: user
          enum:
            - user
            - waiter
            - admin
      required:
        - email
        - password
        - name
        - phoneNumber
    RegisterRes:
      type: object
      description: user object with token role and other main user properties
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        createdAt:
          type: string
        role:
          type: string
          enum:
            - user
            - admin
            - waiter
    MessageResponse:
      type: object
      description: message
      properties:
        message:
          type: string
          example: ok
    APIError:
      type: object
      description: Error object from API
      properties:
        message:
          type: string
          example: invalid token
        extra:
          type: string
          format: nullable
        errors:
          type: object
          properties:
            name:
              type: string
              example: APIError
            message:
              type: string
              example: invalid token
            status:
              type: integer
              format: int32
              example: 401
            extra:
              type: string
              format: nullable
    Payment:
      title: Payment
      type: object
      properties:
        _id:
          $ref: '#/components/schemas/Id'
        paymentMethod:
          type: string
          example: card
        totalAmount:
          type: number
          example: 12
        currency:
          type: string
          example: eur
        status:
          type: string
          enum:
            - unpaid
            - paid
            - cancelled
          example: unpaid
          default: unpaid
        order:
          $ref: ''
        paidAt:
          type: string
          format: date
          example: '2021-12-24'
    Reservation:
      title: Reservation
      type: object
      properties:
        _id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
          example: John doe
        email:
          type: string
          example: john878@gmail.com
          format: email
        reservationDate:
          type: string
          example: '2022-02-17T03:59:13.192+00:00'
          format: date
        from:
          type: string
          example: '09:00'
        to:
          type: string
          example: '11:00'
        personCount:
          type: number
          example: '3'
        note:
          type: string
          example: table for 3
        reservationStatus:
          type: string
          example: accepted
          enum:
            - accepted
            - pending
            - declined
        adminNote:
          type: string
          example: table no 5
        tableNumber:
          type: number
          example: 5
      required:
        - email
    Specials:
      title: Specials
      type: object
      properties:
        _id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
        description:
          type: string
        bannerImg:
          type: string
    Table:
      title: Table
      type: object
      properties:
        _id:
          $ref: '#/components/schemas/Id'
        tableNumber:
          type: number
        status:
          type: string
          default: active
          enum:
            - active
            - deactive
          example: deactive
